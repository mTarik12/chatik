[{"C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\index.js":"1","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\App.js":"2","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\reportWebVitals.js":"3","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\reducer.js":"4","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\socket.js":"5","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\Chat\\Chat.component.jsx":"6","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\ChatMessages\\ChatMessages.component.jsx":"7","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\ChatsList\\ChatsList.component.jsx":"8","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\ChatListItem\\ChatListItem.component.jsx":"9"},{"size":494,"mtime":1611570551747,"results":"10","hashOfConfig":"11"},{"size":2532,"mtime":1611570551743,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1611570551748,"results":"13","hashOfConfig":"11"},{"size":960,"mtime":1611570551747,"results":"14","hashOfConfig":"11"},{"size":109,"mtime":1611570551748,"results":"15","hashOfConfig":"11"},{"size":2866,"mtime":1611570551743,"results":"16","hashOfConfig":"11"},{"size":2975,"mtime":1611571952265,"results":"17","hashOfConfig":"11"},{"size":526,"mtime":1611570551746,"results":"18","hashOfConfig":"11"},{"size":912,"mtime":1611573186747,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"fngg4c",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\index.js",[],["42","43"],"C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\App.js",["44"],"import React, { useState } from \"react\";\r\nimport { useReducer, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport ChatComonent from \"./components/Chat/Chat.component\";\r\nimport reducer from \"./reducer\";\r\nimport socket from \"./socket\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  let user = {};\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    joined: false,\r\n    chatID: null,\r\n    userName: null,\r\n    users: {},\r\n    messages: [],\r\n    chatIds: [],\r\n  });\r\n\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  const setUsers = (users) => {\r\n    dispatch({\r\n      type: \"SET_USERS\",\r\n      payload: users,\r\n    });\r\n  };\r\n  const onEnter = async () => {\r\n    user = JSON.parse(localStorage.getItem(\"chatik-user\"));\r\n    if (!user) {\r\n      socket.emit(\"GENERATE_NEW_USER\");\r\n    } else {\r\n      socket.emit(\"CONNECT_USER_TO_ALL_CHATS\", { user });\r\n    }\r\n    const res = await axios.get(\"http://localhost:8080/chats\");\r\n\r\n    user && delete res.data.users[user.id];\r\n\r\n    setUsers(res.data.users);\r\n  };\r\n\r\n  const onNewUserJoined = ({ newUser }) => {\r\n    const newChatId = `${user.id}_${newUser.id}`;\r\n    socket.emit(\"JOIN_CHAT\", { newChatId });\r\n  };\r\n\r\n  const onUserGenerated = ({ user: generatedUser }) => {\r\n    user = generatedUser;\r\n    localStorage.setItem(\"chatik-user\", JSON.stringify(generatedUser));\r\n  };\r\n\r\n  const onUserListChanged = ({ chat }) => {\r\n    delete chat[user.id];\r\n    setUsers({ ...state.users, ...chat });\r\n  };\r\n  const onChatIdsAdded = ({ global_chatIds }) => {\r\n    dispatch({\r\n      type: \"SET_CHAT_IDS\",\r\n      payload: global_chatIds,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    onEnter();\r\n    socket.on(\"NEW_USER_JOINED\", onNewUserJoined);\r\n    socket.on(\"USER_GENERATED\", onUserGenerated);\r\n    socket.on(\"USERS_LIST_CHANGED\", onUserListChanged);\r\n    socket.on(\"CHAT_IDS_ADDED\", onChatIdsAdded);\r\n  }, []);\r\n\r\n  const getFilteredUsers = (stateUsers, searchValue) => {\r\n    const users = JSON.parse(JSON.stringify(stateUsers));\r\n    Object.keys(users).forEach((userKey) => {\r\n      if (\r\n        !users[userKey].userName\r\n          .toLowerCase()\r\n          .includes(searchValue.toLowerCase())\r\n      ) {\r\n        delete users[userKey];\r\n      }\r\n    });\r\n    return users;\r\n  };\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <ChatComonent\r\n        {...state}\r\n        users={getFilteredUsers(state.users, searchValue)}\r\n        searchValue={searchValue}\r\n        setSearchValue={setSearchValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\reportWebVitals.js",[],"C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\reducer.js",["45"],"export default (state, action) => {\r\n    switch (action.type) {\r\n        case 'JOINED':\r\n            return {\r\n                ...state,\r\n                joined: true,\r\n                chatID: action.payload.chatID,\r\n                userName: action.payload.userName,\r\n            };\r\n\r\n        case 'SET_USERS':\r\n            return {\r\n                ...state,\r\n                users: action.payload,\r\n            };\r\n\r\n        case 'NEW_MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.payload],\r\n            };\r\n\r\n        case 'SET_DATA':\r\n            return {\r\n                ...state,\r\n                users: action.payload.users,\r\n                messages: action.payload.messages,\r\n            };\r\n        case 'SET_CHAT_IDS':\r\n            return {\r\n                ...state,\r\n                chatIds: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\socket.js",[],"C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\Chat\\Chat.component.jsx",["46"],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport socket from \"../../socket\";\r\n\r\nimport \"./Chat.style.css\";\r\nimport ChatMessages from \"../ChatMessages/ChatMessages.component\";\r\nimport ChatList from \"../ChatsList/ChatsList.component\";\r\n\r\n// TODO fix users, user\r\nconst ChatComponent = ({ users, chatIds, searchValue, setSearchValue }) => {\r\n  const currentUser = JSON.parse(localStorage.getItem(\"chatik-user\"));\r\n  const [selectedUser, setSelectedUser] = useState();\r\n  const [messages, setMessages] = useState({});\r\n\r\n  const sendMessage = (messageValue, chatId, receiverId) => {\r\n    socket.emit(\"MESSAGE_SENT\", {\r\n      text: messageValue,\r\n      chatId,\r\n      senderId: currentUser.id,\r\n    });\r\n    const userMessages = messages[receiverId] ? messages[receiverId] : [];\r\n    setMessages({\r\n      ...messages,\r\n      ...{\r\n        [receiverId]: [...userMessages, { text: messageValue, sent: true }],\r\n      },\r\n    });\r\n  };\r\n\r\n  const onReceivedMessage = ({ text, senderId }) => {\r\n    console.log(\"received\", text, senderId);\r\n    const userMessages = messages[senderId] ? messages[senderId] : [];\r\n    setMessages({\r\n      ...messages,\r\n      ...{ [senderId]: [...userMessages, { text, sent: false }] },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"MESSAGE_RECEIVED\", onReceivedMessage);\r\n  }, [messages]);\r\n\r\n  const getOnlineUsers = (stateUsers) => {\r\n    const users = JSON.parse(JSON.stringify(stateUsers));\r\n    Object.keys(users).forEach((userKey) => {\r\n      if (!users[userKey].online) {\r\n        delete users[userKey];\r\n      }\r\n    });\r\n    return users;\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      {selectedUser ? (\r\n        <ChatMessages\r\n          user={selectedUser}\r\n          chatIds={chatIds}\r\n          sendMessage={sendMessage}\r\n          messages={messages[selectedUser.id] ? messages[selectedUser.id] : []}\r\n        />\r\n      ) : (\r\n        <div className=\"chat-messages\">Select chat</div>\r\n      )}\r\n\r\n      <div className=\"chat-users\">\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>Online</Tab>\r\n            <Tab>All</Tab>\r\n          </TabList>\r\n\r\n          <TabPanel>\r\n            <ChatList\r\n              users={getOnlineUsers(users)}\r\n              setSelectedUser={setSelectedUser}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel>\r\n            <ChatList users={users} setSelectedUser={setSelectedUser} />\r\n          </TabPanel>\r\n        </Tabs>\r\n        <div>\r\n          <input\r\n            className=\"search-control\"\r\n            placeholder=\"Search...\"\r\n            value={searchValue}\r\n            onChange={(e) => setSearchValue(e.target.value)}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n","C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\ChatMessages\\ChatMessages.component.jsx",["47","48"],"C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\ChatsList\\ChatsList.component.jsx",[],"C:\\Users\\12nmr\\OneDrive\\Робочий стіл\\New folder\\chatik\\client\\src\\components\\ChatListItem\\ChatListItem.component.jsx",["49","50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":71,"column":6,"nodeType":"57","endLine":71,"endColumn":8,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":1,"nodeType":"61","endLine":37,"endColumn":2},{"ruleId":"55","severity":1,"message":"62","line":43,"column":6,"nodeType":"57","endLine":43,"endColumn":16,"suggestions":"63"},{"ruleId":"55","severity":1,"message":"64","line":32,"column":13,"nodeType":"65","endLine":37,"endColumn":4},{"ruleId":"55","severity":1,"message":"66","line":37,"column":6,"nodeType":"57","endLine":37,"endColumn":8,"suggestions":"67"},{"ruleId":"55","severity":1,"message":"64","line":9,"column":13,"nodeType":"65","endLine":14,"endColumn":4},{"ruleId":"55","severity":1,"message":"66","line":14,"column":6,"nodeType":"57","endLine":14,"endColumn":8,"suggestions":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onEnter', 'onNewUserJoined', 'onUserGenerated', and 'onUserListChanged'. Either include them or remove the dependency array.","ArrayExpression",["71"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'onReceivedMessage'. Either include it or remove the dependency array.",["72"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'user.userAvatarName'. Either include it or remove the dependency array.",["73"],["74"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},{"desc":"79","fix":"81"},"Update the dependencies array to be: [onEnter, onNewUserJoined, onUserGenerated, onUserListChanged]",{"range":"82","text":"83"},"Update the dependencies array to be: [messages, onReceivedMessage]",{"range":"84","text":"85"},"Update the dependencies array to be: [user.userAvatarName]",{"range":"86","text":"87"},{"range":"88","text":"87"},[1878,1880],"[onEnter, onNewUserJoined, onUserGenerated, onUserListChanged]",[1444,1454],"[messages, onReceivedMessage]",[1049,1051],"[user.userAvatarName]",[399,401]]