[{"C:\\Users\\users\\Desktop\\chut\\src\\App.js":"1","C:\\Users\\users\\Desktop\\chut\\src\\components\\Chat\\Chat.component.jsx":"2","C:\\Users\\users\\Desktop\\chut\\src\\reportWebVitals.js":"3","C:\\Users\\users\\Desktop\\chut\\src\\reducer.js":"4","C:\\Users\\users\\Desktop\\chut\\src\\socket.js":"5"},{"size":2909,"mtime":1611484303783,"results":"6","hashOfConfig":"7"},{"size":4597,"mtime":1611486519293,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611348853000,"results":"9","hashOfConfig":"7"},{"size":923,"mtime":1611429396257,"results":"10","hashOfConfig":"7"},{"size":109,"mtime":1611430936475,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1uoaarc",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\users\\Desktop\\chut\\src\\App.js",["25","26"],"C:\\Users\\users\\Desktop\\chut\\src\\components\\Chat\\Chat.component.jsx",["27"],"import React from \"react\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport socket from \"../../socket\";\r\n\r\nimport \"./Chat.style.css\";\r\n\r\n// TODO fix users, user\r\nconst ChatComponent = ({\r\n  users,\r\n  user,\r\n  messages,\r\n  userName,\r\n  chatID,\r\n  onAddMessage,\r\n}) => {\r\n  const currentUser = JSON.parse(localStorage.getItem(\"chatik-user\"));\r\n  const [messageValue, setmessageValue] = useState(\"\");\r\n  const [typing, setTyping] = useState(false);\r\n  const messagesRef = useRef(null);\r\n\r\n  console.log(messages);\r\n  const messagesData = { userName, chatID, text: messageValue };\r\n\r\n  const handleChanged = (e) => {\r\n    setmessageValue(e.target.value);\r\n    setTyping(true);\r\n  };\r\n\r\n  const setTimerForSpamBot = (max, min) => {\r\n    return Math.floor(Math.random() * (max + 1 - min) + min);\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    socket.emit(\"CHAT_NEW_MESSAGE\", messagesData);\r\n    onAddMessage({ userName, text: messageValue });\r\n    setmessageValue(\"\");\r\n    setTyping(false);\r\n  };\r\n\r\n  const sendRoboMessage = () => {\r\n    socket.emit(\"CHAT:ROBO_MESSAGE\", messagesData);\r\n    onAddMessage({ userName, text: messageValue });\r\n    onAddMessage({ userName: \"Echo bot\", text: messageValue });\r\n    setmessageValue(\"\");\r\n  };\r\n\r\n  const sendReverseMessage = () => {\r\n    socket.emit(\"CHAT:REVERSE_MESSAGE\", messagesData);\r\n    onAddMessage({ userName, text: messageValue });\r\n    setTimeout(() => {\r\n      onAddMessage({\r\n        userName: \"Reverse bot\",\r\n        text: messageValue.split(\"\").reverse().join(\"\"),\r\n      });\r\n    }, 3000);\r\n    setmessageValue(\"\");\r\n  };\r\n\r\n  const sendRandomMessage = () => {\r\n    const spam = [\r\n      \"Good evening\",\r\n      \"How are you doing?\",\r\n      \"Good job!\",\r\n      \"Hi!\",\r\n      \"Not good...\",\r\n      \"Let's work!\",\r\n      \"I want to go home\",\r\n      \"What is your name?\",\r\n      \"My name is Spam bot...\",\r\n    ];\r\n\r\n    socket.emit(\"CHAT:RANDOM_MESSAGE\", messagesData);\r\n    onAddMessage({ userName, text: messageValue });\r\n    setInterval(() => {\r\n      const randomSpam = Math.floor(Math.random() * 9);\r\n      onAddMessage({ userName: \"Spam bot\", text: spam[randomSpam] });\r\n    }, setTimerForSpamBot(121000, 10000));\r\n    setmessageValue(\"\");\r\n  };\r\n\r\n  const sendIgnoredMessage = () => {\r\n    socket.emit(\"CHAT:IGNORE_MESSAGE\", messagesData);\r\n    onAddMessage({ userName, text: messageValue });\r\n    setmessageValue(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    messagesRef.current.scrollTo(0, 9999999);\r\n  }, [messages]);\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat-users\">\r\n        Chat: <b>{chatID}</b>\r\n        <hr />\r\n        <b>Online: {Object.values(users).length}</b>\r\n        <ul>\r\n          {Object.values(users).map((user, index) => (\r\n            <li key={index}>\r\n              {user.userName}, online:{user.online.toString()}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        <div className=\"messages\" ref={messagesRef}>\r\n          {messages.map((messages, index) => (\r\n            <div className=\"message\">\r\n              <p key={messages + index}>{messages.text}</p>\r\n              <div>\r\n                <span key={messages.userName + index}>{messages.userName}</span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <form>\r\n          <div>{typing ? \"User is typing...\" : \"\"}</div>\r\n          <textarea\r\n            className=\"form-control\"\r\n            rows=\"3\"\r\n            value={messageValue}\r\n            onChange={handleChanged}\r\n          ></textarea>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={sendMessage}\r\n          >\r\n            Send message\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={sendRoboMessage}\r\n          >\r\n            Send Robo message\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={sendReverseMessage}\r\n          >\r\n            Send Reverse message\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={sendRandomMessage}\r\n          >\r\n            Send Random message\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={sendIgnoredMessage}\r\n          >\r\n            Ignore message\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n","C:\\Users\\users\\Desktop\\chut\\src\\reportWebVitals.js",[],"C:\\Users\\users\\Desktop\\chut\\src\\reducer.js",["28"],"export default (state, action) => {\n    switch (action.type) {\n        case 'JOINED':\n            return {\n                ...state,\n                joined: true,\n                chatID: action.payload.chatID,\n                userName: action.payload.userName,\n            };\n\n        case 'SET_USERS':\n            return {\n                ...state,\n                users: action.payload,\n            };\n\n        case 'NEW_MESSAGE':\n            return {\n                ...state,\n                messages: [...state.messages, action.payload],\n            };\n\n        case 'SET_DATA':\n            return {\n                ...state,\n                users: action.payload.users,\n                messages: action.payload.messages,\n            };\n\n        case 'NEW_CHAT_ID':\n            return {\n                ...state,\n                chatID: action.payload,\n            };\n        default:\n            return state;\n    }\n}",["29","30"],"C:\\Users\\users\\Desktop\\chut\\src\\socket.js",[],{"ruleId":"31","severity":1,"message":"32","line":23,"column":9,"nodeType":"33","messageId":"34","endLine":23,"endColumn":16},{"ruleId":"35","severity":1,"message":"36","line":106,"column":6,"nodeType":"37","endLine":106,"endColumn":8,"suggestions":"38"},{"ruleId":"31","severity":1,"message":"39","line":16,"column":9,"nodeType":"33","messageId":"34","endLine":16,"endColumn":20},{"ruleId":"40","severity":1,"message":"41","line":1,"column":1,"nodeType":"42","endLine":38,"endColumn":2},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},"no-unused-vars","'onLogin' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onEnter', 'onNewUserJoined', 'onUserGenerated', and 'onUserListChanged'. Either include them or remove the dependency array.","ArrayExpression",["47"],"'currentUser' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["48"],"no-negated-in-lhs",["49"],{"desc":"50","fix":"51"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [onEnter, onNewUserJoined, onUserGenerated, onUserListChanged]",{"range":"52","text":"53"},[2610,2612],"[onEnter, onNewUserJoined, onUserGenerated, onUserListChanged]"]