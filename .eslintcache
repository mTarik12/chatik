[{"C:\\Users\\users\\Desktop\\chut\\src\\App.js":"1","C:\\Users\\users\\Desktop\\chut\\src\\components\\Chat\\Chat.component.jsx":"2","C:\\Users\\users\\Desktop\\chut\\src\\reportWebVitals.js":"3","C:\\Users\\users\\Desktop\\chut\\src\\reducer.js":"4","C:\\Users\\users\\Desktop\\chut\\src\\socket.js":"5"},{"size":2790,"mtime":1611429256268,"results":"6","hashOfConfig":"7"},{"size":4210,"mtime":1611431132796,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611348853000,"results":"9","hashOfConfig":"7"},{"size":923,"mtime":1611429396257,"results":"10","hashOfConfig":"7"},{"size":109,"mtime":1611430936475,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1uoaarc",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"15"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\users\\Desktop\\chut\\src\\App.js",["26","27"],"import React from 'react';\nimport { useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nimport ChatComonent from './components/Chat/Chat.component';\nimport reducer from './reducer';\nimport socket from './socket';\n\nimport './App.css';\n\n\n\nconst App = () => {\n  let user = {};\n  const [state, dispatch] = useReducer(reducer, {\n    joined: false,\n    chatID: null,\n    userName: null,\n    users: {},\n    messages: [],\n  });\n\n  const onLogin = async (userData) => {\n    // dispatch({\n    //   type: 'JOINED',\n    //   payload: userData,\n    // });\n    // //socket.emit('CHAT:JOINED', userData);\n\n    // const { data } = await axios.get(`/chat/${userData.chatID}`);\n    // dispatch({\n    //   type: 'SET_DATA',\n    //   payload: data,\n    // });\n  };\n\n  const setUsers = (users) => {\n    dispatch({\n      type: 'SET_USERS',\n      payload: users,\n    });\n  }\n\n  const addMessage = (message) => {\n    dispatch({\n      type: 'NEW_MESSAGE',\n      payload: message\n    });\n  }\n\n  const onEnter = async () => {\n\n    user = JSON.parse(localStorage.getItem('chatik-user'));\n    if (!user) {\n      socket.emit('GENERATE_NEW_USER');\n    } else {\n\n      socket.emit('CONNECT_USER_TO_ALL_CHATS', { user });\n    };\n    const res = await axios.get(\"http://localhost:8080/chats\");\n\n    user && delete res.data.users[user.id]\n    setUsers(res.data.users)\n  };\n\n  const onNewUserJoined = ({ newUser }) => {\n\n    const newChatId = `${user.id}_${newUser.id}`;\n    socket.emit(\"JOIN_CHAT\", { newChatId });\n\n  };\n\n\n  const onUserGenerated = ({ user: generatedUser }) => {\n    user = generatedUser;\n    localStorage.setItem('chatik-user', JSON.stringify(generatedUser));\n  };\n\n  const onUserListChanged = ({ chat }) => {\n    delete chat[user.id];\n    setUsers({ ...state.users, ...chat })\n  };\n\n  const onNewChatID = (newChatIds) => {\n    dispatch({\n      type: 'NEW_CHAT_ID',\n      payload: newChatIds\n    });\n  };\n\n  useEffect(() => {\n    onEnter();\n    // socket.on('CHAT:SET_USERS', setUsers);\n    // socket.on('CHAT:NEW_MESSAGE', addMessage);\n    // socket.on('CHAT:ROBO_MESSAGE', addMessage);\n    // socket.on('CHAT:REVERSE_MESSAGE', addMessage);\n    // socket.on('CHAT:RANDOM_MESSAGE', addMessage);\n    // socket.on('CHAT:IGNORE_MESSAGE', addMessage);\n    // socket.on('CHAT:IGNORE_MESSAGE', addMessage);\n\n    socket.on('NEW_USER_JOINED', onNewUserJoined);\n    socket.on('USER_GENERATED', onUserGenerated);\n    socket.on('USERS_LIST_CHANGED', onUserListChanged);\n    socket.on('NEW_CHAT_ID', onNewChatID);\n\n  }, []);\n\n\n  return <div className=\"wrapper\">\n    <ChatComonent {...state} onAddMessage={addMessage} />\n\n    {/* {Object.keys(state.users).map(userKey => {\n      <ChatComonent {...state} user={state.users[userKey]} onAddMessage={addMessage} />\n    })} */}\n  </div>\n\n}\n\nexport default App;\n",["28","29"],"C:\\Users\\users\\Desktop\\chut\\src\\components\\Chat\\Chat.component.jsx",["30"],"import React from \"react\";\nimport { useState, useRef, useEffect } from \"react\";\nimport socket from \"../../socket\";\n\nimport \"./Chat.style.css\";\n\n// TODO fix users, user\nconst ChatComponent = ({\n  users,\n  user,\n  messages,\n  userName,\n  chatID,\n  onAddMessage,\n}) => {\n  const currentUser = JSON.parse(localStorage.getItem(\"chatik-user\"));\n  const [messageValue, setmessageValue] = useState(\"\");\n  const messagesRef = useRef(null);\n\n  const messagesData = { userName, chatID, text: messageValue };\n\n  const setTimerForSpamBot = (max, min) => {\n    return Math.floor(Math.random() * (max + 1 - min) + min);\n  };\n\n  const sendMessage = () => {\n    socket.emit(\"CHAT_NEW_MESSAGE\", messagesData);\n    onAddMessage({ userName, text: messageValue });\n    setmessageValue(\"\");\n  };\n\n  const sendRoboMessage = () => {\n    socket.emit(\"CHAT:ROBO_MESSAGE\", messagesData);\n    onAddMessage({ userName, text: messageValue });\n    onAddMessage({ userName: \"Echo bot\", text: messageValue });\n    setmessageValue(\"\");\n  };\n\n  const sendReverseMessage = () => {\n    socket.emit(\"CHAT:REVERSE_MESSAGE\", messagesData);\n    onAddMessage({ userName, text: messageValue });\n    setTimeout(() => {\n      onAddMessage({\n        userName: \"Reverse bot\",\n        text: messageValue.split(\"\").reverse().join(\"\"),\n      });\n    }, 3000);\n    setmessageValue(\"\");\n  };\n\n  const sendRandomMessage = () => {\n    const spam = [\n      \"Good evening\",\n      \"How are you doing?\",\n      \"Good job!\",\n      \"Hi!\",\n      \"Not good...\",\n      \"Let's work!\",\n      \"I want to go home\",\n      \"What is your name?\",\n      \"My name is Spam bot...\",\n    ];\n\n    socket.emit(\"CHAT:RANDOM_MESSAGE\", messagesData);\n    onAddMessage({ userName, text: messageValue });\n    setInterval(() => {\n      const randomSpam = Math.floor(Math.random() * 9);\n      onAddMessage({ userName: \"Spam bot\", text: spam[randomSpam] });\n    }, setTimerForSpamBot(121000, 10000));\n    setmessageValue(\"\");\n  };\n\n  const sendIgnoredMessage = () => {\n    socket.emit(\"CHAT:IGNORE_MESSAGE\", messagesData);\n    onAddMessage({ userName, text: messageValue });\n    setmessageValue(\"\");\n  };\n\n  useEffect(() => {\n    messagesRef.current.scrollTo(0, 9999999);\n  }, [messages]);\n  return (\n    <div className=\"chat\">\n      <div className=\"chat-users\">\n        Chat: <b>{chatID}</b>\n        <hr />\n        <b>Online: {Object.values(users).length}</b>\n        <ul>\n          {Object.values(users).map((user, index) => (\n            <li key={index}>\n              {user.userName}, online:{user.online.toString()}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"chat-messages\">\n        <div className=\"messages\" ref={messagesRef}>\n          {messages.map((messages, index) => (\n            <div className=\"message\">\n              <p key={messages + index}>{messages.text}</p>\n              <div>\n                <span key={messages.userName + index}>{messages.userName}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n        <form>\n          <textarea\n            className=\"form-control\"\n            rows=\"3\"\n            value={messageValue}\n            onChange={(e) => setmessageValue(e.target.value)}\n          ></textarea>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={sendMessage}\n          >\n            Send message\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={sendRoboMessage}\n          >\n            Send Robo message\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={sendReverseMessage}\n          >\n            Send Reverse message\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={sendRandomMessage}\n          >\n            Send Random message\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={sendIgnoredMessage}\n          >\n            Ignore message\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatComponent;\n","C:\\Users\\users\\Desktop\\chut\\src\\reportWebVitals.js",[],"C:\\Users\\users\\Desktop\\chut\\src\\reducer.js",["31"],"export default (state, action) => {\n    switch (action.type) {\n        case 'JOINED':\n            return {\n                ...state,\n                joined: true,\n                chatID: action.payload.chatID,\n                userName: action.payload.userName,\n            };\n\n        case 'SET_USERS':\n            return {\n                ...state,\n                users: action.payload,\n            };\n\n        case 'NEW_MESSAGE':\n            return {\n                ...state,\n                messages: [...state.messages, action.payload],\n            };\n\n        case 'SET_DATA':\n            return {\n                ...state,\n                users: action.payload.users,\n                messages: action.payload.messages,\n            };\n\n        case 'NEW_CHAT_ID':\n            return {\n                ...state,\n                chatID: action.payload,\n            };\n        default:\n            return state;\n    }\n}","C:\\Users\\users\\Desktop\\chut\\src\\socket.js",[],{"ruleId":"32","severity":1,"message":"33","line":23,"column":9,"nodeType":"34","messageId":"35","endLine":23,"endColumn":16},{"ruleId":"36","severity":1,"message":"37","line":106,"column":6,"nodeType":"38","endLine":106,"endColumn":8,"suggestions":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"32","severity":1,"message":"44","line":16,"column":9,"nodeType":"34","messageId":"35","endLine":16,"endColumn":20},{"ruleId":"45","severity":1,"message":"46","line":1,"column":1,"nodeType":"47","endLine":38,"endColumn":2},"no-unused-vars","'onLogin' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onEnter', 'onNewUserJoined', 'onUserGenerated', and 'onUserListChanged'. Either include them or remove the dependency array.","ArrayExpression",["48"],"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"'currentUser' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"51","fix":"52"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [onEnter, onNewUserJoined, onUserGenerated, onUserListChanged]",{"range":"53","text":"54"},[2505,2507],"[onEnter, onNewUserJoined, onUserGenerated, onUserListChanged]"]